# -*- coding: utf-8 -*-

"""Presets for SMARTS and molecular substructure matching."""

from random import shuffle
from typing import Dict, List, Union

import numpy as np

"""Preset class."""


class SMARTSPreset:
    """Container class for SMARTS string presets."""

    def __init__(self, preset: Union[str, Dict[str, List[str]]] = "rings"):
        """Initialize class.

        Args:
            preset (Union[str, Dict[str, List[str]]]): Predefined SMARTS map or user-define map.
        """
        self._preset = None
        self.preset = preset

    @property
    def preset(self):
        """Return preset. Getter method.

        Args:
            None.

        Returns:
            (self): Instance of self.
        """
        return self._preset

    @preset.setter
    def preset(self, new_preset: Union[str, Dict[str, List[str]]]):
        if isinstance(new_preset, str):
            self._preset = (SMARTS_MAP[new_preset]["names"], SMARTS_MAP[new_preset]["smarts"])
        else:
            self._preset = new_preset["names"], new_preset["smarts"]

        return


"""Pre-defined presets

1. HETEROCYCLIC
2. SCAFFOLDS
3. RINGS
4. AMINO_PROTECTORS
5. WARHEADS
6. ORGANIC
"""

HETEROCYCLIC = {
    "names": [
        "pyridine",
        "indole",
        "imidazole",
        "thiazol-2-amine",
        "tetrazole",
        "1,2,4-triazole",
        "thiophene",
        "cytosine",
        "adenine",
        "5-methylindole",
        "isocaffeine",
        "tetrazolethiol",
        "3-methylisoxazole",
        "1-methylimidazole",
        "2-methylimidazole",
        "guanine",
        "quinoline",
        "furan",
        "tosufloxacin",
    ],
    "smarts": [
        "[#6]1:[#6]:[#6]:[#7]:[#6]:[#6]:1",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#7H]:2",
        "[#6]1:[#6]:[#7]:[#6]:[#7H]:1",
        "[#7]-[#6]1:[#7]:[#6]:[#6]:[#16]:1",
        "[#6]1:[#7]:[#7]:[#7]:[#7H]:1",
        "[#6]1:[#7]:[#6]:[#7]:[#7H]:1",
        "[#6]1:[#6]:[#6]:[#6]:[#16]:1",
        "[#8]=[#6]1:[#7]:[#6](-[#7]):[#6]:[#6]:[#7H]:1",
        "[#7]-[#6]1:[#7]:[#6]:[#7]:[#6]2:[#6]:1:[#7]:[#6]:[#7H]:2",
        "[#6]-[#6]1:[#6]:[#6]:[#6]2:[#6](:[#6]:[#6]:[#7H]:2):[#6]:1",
        "[#8]=[#6]1:[#7](-[#6]):[#6](:[#6]2:[#6](:[#7H]:1):[#7H]:[#6]:[#7]:2)=[#8]",
        "[#16]-[#7]1:[#7]:[#7]:[#7]:[#6]:1",
        "[#6]1:[#6]:[#6]:[#7]:[#8]:1",
        "[#6]-[#7]1:[#6]:[#7]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#7]:[#6]:[#6]:[#7H]:1",
        "[#7]-[#6]1:[#7H]:[#6](:[#6]2:[#6](:[#7]:1):[#7H]:[#6]:[#7]:2)=[#8]",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#7]:[#6]:[#6]:[#6]:2",
        "[#6]1:[#6]:[#6]:[#6]:[#8]:1",
        "[#7]-[#6]1:[#6](-[#9]):[#6]:[#6]2:[#6](:[#7H]:[#6]:[#6](-[#6](-[#8])=[#8]):[#6]:2=[#8]):[#7]:1",
    ],
}


SCAFFOLDS = {
    "names": [
        "acetamido",
        "acetoacetyl",
        "acetyl",
        "acryloyl",
        "alanyl",
        "beta-alanyl",
        "allyl",
        "allylidene",
        "amidino",
        "amino",
        "amyl",
        "anilino",
        "anisidino",
        "anthranoyl",
        "arsino",
        "azelaoyl",
        "azido",
        "azo",
        "azoxy",
        "benzal",
        "benzamido",
        "benzhydrol",
        "benzoxy",
        "benzoyl",
        "benzyl",
        "benzylidene",
        "benzylidyne",
        "biphenylyl",
        "biphenylene",
        "butoxy",
        "sec-butoxy",
        "tert-butoxy",
        "butyl",
        "sec-butyl",
        "tert-butyl",
        "butyryl",
        "caproyl",
        "capryl",
        "capryloyl",
        "carbamido",
        "carbamoyl",
        "carbamyl",
        "carbazoyl",
        "carbethoxy",
        "carbonyl",
        "carboxy",
        "cetyl",
        "chloroformyl",
        "cinnamoyl",
        "cinnamyl",
        "cinnamylidene",
        "cresyl",
        "crotonoyl",
        "crotyl",
        "cyanamido",
        "cyanato",
        "cyano",
        "decanedioyl",
        "decanoyl",
        "diazo",
        "diazoamino",
        "disilanyl",
        "disiloxanyloxy",
        "disulfinyl",
        "dithio",
        "enanthoyl",
        "epoxy",
        "ethenyl",
        "ethynyl",
        "ethoxy",
        "ethyl",
        "ethylene",
        "ethylidene",
        "ethylthio",
        "formamido",
        "formyl",
        "furmaroyl",
        "furfuryl",
        "furfurylidene",
        "glutamoyl",
        "glutaryl",
        "glycylamino",
        "glycoloyl",
        "glycyl",
        "glyoxyoyl",
        "guanidino",
        "guanyl",
        "heptadecanoyl",
        "heptanamido",
        "heptanoyl",
        "hexadecanoyl",
        "hexamethylene",
        "hexanedioyl",
        "hippuryl",
        "hydrazino",
        "hydrazo",
        "hydrocinnamoyl",
        "hydroperoxy",
        "hydroxyamino",
        "imino",
        "iodoso",
        "iodyl",
        "isoamyl",
        "isobutenyl",
        "isobutoxy",
        "isobutyl",
        "isobutylidene",
        "isobutyryl",
        "isocyanato",
        "isocyano",
        "isohexyl",
        "isoleucyl",
        "isonitroso",
        "isopentyl",
        "isopentylidene",
        "isopropenyl",
        "isopropoxy",
        "isopropyl",
        "isopropylidene",
        "isothiocynato",
        "isovaleryl",
        "lactoyl",
        "lauroyl",
        "lauryl",
        "leucyl",
        "levulinoyl",
        "malonyl",
        "mandeloyl",
        "mercapto",
        "mesityl",
        "methacryloyl",
        "methallyl",
        "methionyl",
        "methoxy",
        "methyl",
        "methylene",
        "methylthio",
        "myristoyl",
        "myristyl",
        "naphthyl",
        "naphthylene",
        "neopentyl",
        "nitramino",
        "nitro",
        "nitrosamino",
        "nitroso",
        "nonanoyl",
        "oleoyl",
        "oxalyl",
        "oxo",
        "palmitoyl",
        "pentamethylene",
        "pentyl",
        "tert-pentyl",
        "phenacyl",
        "phenacylidene",
        "phenethyl",
        "phenoxy",
        "phenyl",
        "phenylene",
        "phosphino",
        "phosphinyl",
        "phospho",
        "phosphono",
        "phthaloyl",
        "picryl",
        "pimeloyl",
        "piperidino",
        "pivaloyl",
        "prenyl",
        "propargyl",
        "1-propenyl",
        "2-propenyl",
        "propionyl",
        "propoxy",
        "propyl",
        "propylidene",
        "pyrryl",
        "salicyloyl",
        "selenyl",
        "seryl",
        "siloxy",
        "silyl",
        "silyene",
        "sorboyl",
        "stearoyl",
        "stearyl",
        "styryl",
        "suberoyl",
        "succinyl",
        "sulfamino",
        "sulfamoyl",
        "sulfanilyl",
        "sulfeno",
        "sulfhydryl",
        "sulfinyl",
        "sulfo",
        "sulfonyl",
        "terephthaloyl",
        "tetramethylene",
        "thienyl",
        "thiocarbonyl",
        "thiocarboxy",
        "thiocyanato",
        "thionyl",
        "threonyl",
        "toluidino",
        "toluoyl",
        "tolyl",
        "alpha-tolyl",
        "tolylene",
        "tosyl",
        "triazano",
        "trimethylene",
        "trityl",
        "valeryl",
        "valyl",
        "vinyl",
        "vinylidene",
        "xylidino",
        "xylyl",
        "xylylene",
    ],
    "smarts": [
        "[#8]=[#6](-[#7])-[#6]",
        "[#8]=[#6](-[#6])-[#6]-[#6](=[#8])-[#8]",
        "[#6](-[#6])=[#8]",
        "[#6]=[#6]-[#6](-[#6])=[#8]",
        "[#7]-[#6H](-[#6])-[#6](-[#6])=[#8]",
        "[#7]-[#6]-[#6]-[#6](-[#6])=[#8]",
        "[#6H2]-[#6]=[#6]",
        "[#6H]-[#6]=[#6]",
        "[#7]-[#6]=[#7]",
        "[#7]",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]",
        "[#7]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#7]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1",
        "[#7]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6](-[#6])=[#8]",
        "[AsH3]",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#7]=[#7+]=[#7-]",
        "[#6]/[#7]=[#7]/[#6]",
        "[#6]/[#7]=[#7+](\\[#8-])-[#6]",
        "[#6H]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6](-[#7])-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6H2]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6H]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1(-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]12=[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3=[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#8]-[#6]-[#6]-[#6]-[#6]",
        "[#8]-[#6](-[#6])-[#6]-[#6]",
        "[#8]-[#6](-[#6])(-[#6])-[#6]",
        "[#6H2]-[#6]-[#6]-[#6]",
        "[#6]-[#6]-[#6H]-[#6]",
        "[#6]-[#6](-[#6])-[#6]",
        "[#8]=[#6]-[#6]-[#6]-[#6]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6](=[#8])(-[#7])-[#7]",
        "[#7]-[#6]=[#8]",
        "[#7]-[#6]=[#8]",
        "[#7]-[#7]-[#6]=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]",
        "[#6H]=[#8]",
        "[#8]=[#6]-[#8]",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#8]=[#6]-[#17]",
        "[#8]=[#6]-[#6]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6H2]-[#6]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6H]-[#6]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1",
        "[#6]/[#6]=[#6]/[#6]=[#8]",
        "[#6H2]/[#6]=[#6]/[#6]",
        "[#7H]-[#6]#[#7]",
        "[#8]-[#6]#[#7]",
        "[#6]#[#7]",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#7+]=[#7-]",
        "[#7]=[#7]-[#7]",
        "[SiH2]-[SiH3]",
        "[#8]-[SiH2]-[#8]-[SiH3]",
        "[#8]=[#16]-[#16]=[#8]",
        "[#16]-[#16]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#8]",
        "[#6H]=[#6]",
        "[#6]#[#6]",
        "[#8]-[#6]-[#6]",
        "[#6H2]-[#6]",
        "[#6]=[#6]",
        "[#6H]-[#6]",
        "[#16]-[#6]-[#6]",
        "[#8]=[#6]-[#7H]",
        "[#6H]=[#8]",
        "[#8]=[#6]-[#8]",
        "[#6H2]-[#6]1:[#6]:[#6]:[#6]:[#8]:1",
        "[#6H]-[#6]1:[#6]:[#6]:[#6]:[#8]:1",
        "[#7]-[#6@@H](-[#6]-[#6]-[#6]=[#8])-[#6]=[#8]",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#7H]-[#6](-[#6]-[#7])=[#8]",
        "[#8]-[#6]-[#6]=[#8]",
        "[#7]-[#6]-[#6]=[#8]",
        "[#8]=[#6]-[#6]=[#8]",
        "[#7H]-[#6](-[#7])=[#7]",
        "[#7]=[#6]-[#7]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6](-[#7H])=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8].[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6](-[#7H])=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8].[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8].[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6](-[#7H])=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6H2]-[#6]-[#7]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#7]-[#7H]",
        "[#7]-[#7]",
        "[#8]=[#6]-[#6]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#8]",
        "[#7H]-[#8]",
        "[#7H]",
        "[#53]=[#8]",
        "[#8]=[#53]=[#8]",
        "[#6H2]-[#6]-[#6](-[#6])-[#6]",
        "[#6H]=[#6](-[#6])-[#6]",
        "[#8]-[#6]-[#6](-[#6])-[#6]",
        "[#6H2]-[#6](-[#6])-[#6]",
        "[#6H]-[#6](-[#6])-[#6]",
        "[#8]=[#6]-[#6](-[#6])-[#6]",
        "[#7]=[#6]=[#8]",
        "[#7+]#[#6-]",
        "[#6H2]-[#6]-[#6]-[#6](-[#6])-[#6]",
        "[#7]-[#6@@H](-[#6@@H](-[#6])-[#6]-[#6])-[#6]=[#8]",
        "[#7]-[#8]",
        "[#6H2]-[#6]-[#6](-[#6])-[#6]",
        "[#6H]-[#6]-[#6](-[#6])-[#6]",
        "[#6]=[#6]-[#6]",
        "[#8]-[#6](-[#6])-[#6]",
        "[#6]-[#6H]-[#6]",
        "[#6]-[#6]-[#6]",
        "[#7]=[#6]=[#16]",
        "[#8]=[#6]-[#6]-[#6](-[#6])-[#6]",
        "[#8]-[#6](-[#6])-[#6]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#7]-[#6@@H](-[#6]-[#6](-[#6])-[#6])-[#6]=[#8]",
        "[#8]=[#6](-[#6])-[#6]-[#6]-[#6]=[#8]",
        "[#8]=[#6]-[#6]-[#6]=[#8]",
        "[#8]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]=[#8]",
        "[#16H]",
        "[#6]-[#6]1:[#6]:[#6](-[#6]):[#6]:[#6](-[#6]):[#6]:1",
        "[#6]-[#6](-[#6]=[#8])=[#6]",
        "[#6H2]-[#6](-[#6])=[#6]",
        "[#7]-[#6@@H](-[#6]-[#6]-[#16]-[#6])-[#6]=[#8]",
        "[#8]-[#6]",
        "[#6H3]",
        "[#6H2]",
        "[#16]-[#6]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6H2]-[#6](-[#6])(-[#6])-[#6]",
        "[#7H]-[#7+](-[#8-])=[#8]",
        "[#8]=[#7+]-[#8-]",
        "[#7H]-[#7]=[#8]",
        "[#7]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]/[#6]=[#6]\\[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#8]=[#6]-[#6]=[#8]",
        "[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#8]=[#6]1-[#6](-[#6]=[#6])-[#6@H]2-[#16]-[#6]-[#6]-[#7]-1-2",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]",
        "[#6]-[#6]-[#6](-[#6])-[#6]",
        "[#6H2]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6H]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6H2]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#15H2]",
        "[#15H2]=[#8]",
        "[#8]=[#15](-[#8])-[#8]",
        "[#8]=[#15](-[#8])-[#8]",
        "[#8]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]=[#8]",
        "[#8-]-[#7+](-[#6]1:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:1)=[#8]",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#7]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]-[#6](-[#6])(-[#6])-[#6]=[#8]",
        "[#6H2]-[#6]=[#6](-[#6])-[#6]",
        "[#6H2]-[#6]#[#6]",
        "[#6H]=[#6]-[#6]",
        "[#6H2]-[#6]=[#6]",
        "[#8]=[#6]-[#6]-[#6]",
        "[#8]-[#6]-[#6]-[#6]",
        "[#6H2]-[#6]-[#6]",
        "[#6H]-[#6]-[#6]",
        "[#7H]1:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]=[#8]",
        "[SeH]",
        "[#7]-[#6@@H](-[#6]-[#8])-[#6]=[#8]",
        "[#8]-[SiH3]",
        "[SiH3]",
        "[SiH2]",
        "[#6]-[#6]=[#6]-[#6]=[#6]-[#6](-[#8])=[#8]",
        "[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#6H2]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#6H]=[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#8]=[#6]-[#6]-[#6]-[#6]=[#8]",
        "[#7H]-[#16](=[#8])(-[#8])=[#8]",
        "[#8]=[#16](-[#7])=[#8]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#7]):[#6]:[#6]:1)=[#8]",
        "[#16]-[#8]",
        "[#16H]",
        "[#16]=[#8]",
        "[#8]=[#16](-[#8])=[#8]",
        "[#8]=[#16]=[#8]",
        "[#8]=[#6]-[#6]1:[#6]:[#6]:[#6](-[#6]=[#8]):[#6]:[#6]:1",
        "[#6]-[#6]-[#6]-[#6]",
        "[#6]1:[#6]:[#6]:[#6]:[#16]:1",
        "[#6H]=[#16]",
        "[#16]=[#6]-[#8]",
        "[#16]-[#6]#[#7]",
        "[#16]=[#8]",
        "[#7]-[#6@@H](-[#6@H](-[#8])-[#6])-[#6]=[#8]",
        "[#7H]-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#6]=[#8]):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6H]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1)=[#8]",
        "[#7H]-[#7]-[#7H]",
        "[#6]-[#6]-[#6]",
        "[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#7]-[#6@@H](-[#6](-[#6])-[#6])-[#6]=[#8]",
        "[#6H]=[#6]",
        "[#6]=[#6]",
        "[#7H]-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6](-[#6]):[#6]:1",
        "[#7]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6](-[#6]-[#7]):[#6]:1",
    ],
}


RINGS = {
    "names": [
        "cyclopropane",
        "spiropentane",
        "cyclobutane",
        "cyclopentane",
        "furan",
        "thiophene",
        "pyrrole",
        "2H-pyrrole",
        "3H-pyrrole",
        "pyrazole",
        "2H-imidazole",
        "1,2,3-triazole",
        "1,2,4-triazole",
        "1,2-dithiole",
        "1,3-dithiole",
        "3H-1,2-oxathiole",
        "isoxazole",
        "oxazole",
        "thiazole",
        "isothiazole",
        "1,2,3-oxadiazole",
        "1,2,4-oxadiazole",
        "1,2,5-oxadiazole",
        "1,3,4-oxadiazole",
        "1,2,3,4-oxatriazole",
        "1,2,3,5-oxatriazole",
        "3H-1,2,3-dioxazole",
        "1,2,4-dioxazole",
        "1,3,2-dioxazole",
        "1,3,4-dioxazole",
        "5H-1,2,5-oxathiazole",
        "1,3-oxathiole",
        "benzene",
        "cyclohexane",
        "2H-pyran",
        "4H-pyran",
        "2H-pyran-2-one",
        "4H-pyran-4-one",
        "1,2-dioxin",
        "1,3-dioxin",
        "pyridine",
        "pyridazine",
        "pyrimidine",
        "pyrazine",
        "piperazine",
        "1,3,5-triazine",
        "1,2,4-triazine",
        "1,2,3-triazine",
        "4H-1,2-Oxazine",
        "2H-1,3-Oxazine",
        "6H-1,3-Oxazine",
        "6H-1,2-Oxazine",
        "1,4-Oxazine",
        "2H-1,2-Oxazine",
        "4H-1,4-Oxazine",
        "1,2,5-Oxathiazine",
        "1,2,6-Oxathiazine",
        "1,2,4-Oxadiazine",
        "1,3,5-Oxadiazine",
        "morpholine",
        "azepine",
        "oxepin",
        "thiepin",
        "4H-1,2-diazepine",
        "indene",
        "2H-indene",
        "benzofuran",
        "isobenzofuran",
        "benzo[b]thiophene",
        "benzo[c]thiophene",
        "indole",
        "3H-indole",
        "1H-indole",
        "cyclopenta[b]pyridine",
        "pyrano[3,4-b]-pyrrole",
        "indazole",
        "benzisoxazole",
        "benzoxazole",
        "2,1-benzisoxazole",
        "naphthalene",
        "1,2,3,4-tetrahydronaphthalene",
        "octahydronaphthalene",
        "2H-1-benzopyran",
        "2H-1-benzopyran-2-one",
        "4H-1-benzopyran-4-one",
        "1H-2-benzopyran-1-one",
        "3H-2-benzopyran-1-one",
        "quinoline",
        "isoquinoline",
        "cinnoline",
        "quinazoline",
        "1,8-napthyhridine",
        "1,7-napththyridine",
        "1,5-napththridine",
        "1,6-napthyridine",
        "2H-1,3-benzoxazine",
        "2H-1,4-benzoxazine",
        "1H-2,3-benzoxazine",
        "4H-3,1-benzoxazine",
        "2H-1,2-benzoxazine",
        "4H-1,3-benzoxazine",
        "anthracene",
        "phenanthrene",
        "phenalene",
        "fluorene",
        "carbazole",
        "xanthene",
        "acridine",
        "norpinane",
        "7H-purine",
        "steroid_ring_system",
    ],
    "smarts": [
        "[#6]1-[#6]-[#6]-1",
        "[#6]1-[#6]-[#6]-12-[#6]-[#6]-2",
        "[#6]1-[#6]-[#6]-[#6]-1",
        "[#6]1-[#6]-[#6]-[#6]-[#6]-1",
        "[#8]1:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1:[#6]:[#6]:[#6]:[#16]:1",
        "[#7H]1:[#6]:[#6]:[#6]:[#6]:1",
        "[#7]1=[#6]-[#6]=[#6]-[#6]-1",
        "[#7]1=[#6]-[#6]-[#6]=[#6]-1",
        "[#7H]1:[#7]:[#6]:[#6]:[#6]:1",
        "[#6]1-[#7]=[#6]-[#6]=[#7]-1",
        "[#7H]1:[#7]:[#7]:[#6]:[#6]:1",
        "[#7H]1:[#7]:[#6]:[#7]:[#6]:1",
        "[#16]1-[#16]-[#6]=[#6]-[#6]-1",
        "[#16]1-[#6]-[#16]-[#6]=[#6]-1",
        "[#8]1-[#16]-[#6]-[#6]=[#6]-1",
        "[#8]1:[#7]:[#6]:[#6]:[#6]:1",
        "[#8]1:[#6]:[#7]:[#6]:[#6]:1",
        "[#16]1:[#6]:[#7]:[#6]:[#6]:1",
        "[#16]1:[#7]:[#6]:[#6]:[#6]:1",
        "[#8]1:[#7]:[#7]:[#6]:[#6]:1",
        "[#8]1:[#7]:[#6]:[#7]:[#6]:1",
        "[#8]1:[#7]:[#6]:[#6]:[#7]:1",
        "[#8]1:[#6]:[#7]:[#7]:[#6]:1",
        "[#8]1:[#7]:[#7]:[#7]:[#6]:1",
        "[#8]1:[#7]:[#7]:[#6]:[#7]:1",
        "[#8]1-[#8]-[#7]-[#6]=[#6]-1",
        "[#8]1-[#8]-[#6]=[#7]-[#6]-1",
        "[#8]1-[#7]-[#8]-[#6]=[#6]-1",
        "[#8]1-[#6]-[#8]-[#7]=[#6]-1",
        "[#8]1-[#16]-[#6]=[#6]-[#7]-1",
        "[#8]1-[#6]-[#16]-[#6]=[#6]-1",
        "[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]1-[#6]=[#6]-[#6]=[#6]-[#8]-1",
        "[#6]1=[#6]-[#6]-[#6]=[#6]-[#8]-1",
        "[#8]=[#6]1:[#6]:[#6]:[#6]:[#6]:[#8]:1",
        "[#8]=[#6]1:[#6]:[#6]:[#8]:[#6]:[#6]:1",
        "[#8]1-[#8]-[#6]=[#6]-[#6]=[#6]-1",
        "[#8]1-[#6]-[#8]-[#6]=[#6]-[#6]-1",
        "[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]1:[#7]:[#7]:[#6]:[#6]:[#6]:1",
        "[#6]1:[#7]:[#6]:[#6]:[#6]:[#7]:1",
        "[#6]1:[#7]:[#6]:[#6]:[#7]:[#6]:1",
        "[#7]1-[#6]-[#6]-[#7]-[#6]-[#6]-1",
        "[#7]1:[#6]:[#7]:[#6]:[#7]:[#6]:1",
        "[#7]1:[#7]:[#6]:[#7]:[#6]:[#6]:1",
        "[#7]1:[#7]:[#7]:[#6]:[#6]:[#6]:1",
        "[#8]1-[#7]=[#6]-[#6]-[#6]=[#6]-1",
        "[#8]1-[#6]-[#7]=[#6]-[#6]=[#6]-1",
        "[#8]1-[#6]=[#7]-[#6]=[#6]-[#6]-1",
        "[#8]1-[#7]=[#6]-[#6]=[#6]-[#6]-1",
        "[#8]1-[#6]=[#6]-[#7]=[#6]-[#6]-1",
        "[#8]1-[#7]-[#6]=[#6]-[#6]=[#6]-1",
        "[#8]1-[#6]=[#6]-[#7]-[#6]=[#6]-1",
        "[#8]1-[#16]-[#6]=[#6]-[#7]=[#6]-1",
        "[#8]1-[#16]-[#6]=[#6]-[#6]=[#7]-1",
        "[#8]1-[#7]-[#6]=[#7]-[#6]=[#6]-1",
        "[#8]1-[#6]=[#7]-[#6]=[#7]-[#6]-1",
        "[#7]1-[#6]-[#6]-[#8]-[#6]-[#6]-1",
        "[#7]1-[#6]=[#6]-[#6]=[#6]-[#6]=[#6]-1",
        "[#8]1-[#6]=[#6]-[#6]=[#6]-[#6]=[#6]-1",
        "[#16]1-[#6]=[#6]-[#6]=[#6]-[#6]=[#6]-1",
        "[#7]1=[#6]-[#6]=[#6]-[#6]-[#6]=[#7]-1",
        "[#6]12:[#6](-[#6]-[#6]=[#6]-1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12=[#6]-[#6]-[#6]=[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#8]:2",
        "[#6]12:[#6]:[#8]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#16]:2",
        "[#6]12:[#6]:[#16]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6](:[#7H]:[#6]:[#6]:1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6](-[#7]=[#6]-[#6]-1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6](:[#7H]:[#6]:[#6]:1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]-1:[#6]:[#6]:[#6]:[#7H]:2",
        "[#6]12:[#6]:[#8]:[#6]:[#6]:[#6]-1:[#6]:[#6]:[#7]:2",
        "[#6]12:[#6](:[#7H]:[#7]:[#6]:1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#7]:[#8]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#8]:[#6]:[#7]:2",
        "[#6]12:[#6]:[#8]:[#7]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6](-[#6]-[#6]-[#6]-[#6]-1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12-[#6]-[#6]-[#6]-[#6]-[#6]-1=[#6]-[#6]-[#6]-[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6]-[#6]=[#6]-2",
        "[#8]=[#6]1:[#6]:[#6]:[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2:[#8]:1",
        "[#8]=[#6]1:[#6]:[#6]:[#8]:[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:1:2",
        "[#8]=[#6]1:[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2:[#6]:[#6]:[#8]:1",
        "[#8]=[#6]1-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2-[#6]-[#6]-[#8]-1",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#7]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6](:[#6]:[#7]:[#6]:[#6]:1):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#6]:[#7]:[#7]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#6]:[#7]:[#6]:[#7]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]1:[#6]:[#6]2:[#6](:[#7]:[#6]:1):[#7]:[#6]:[#6]:[#6]:2",
        "[#6]1:[#6]:[#6]2:[#6](:[#6]:[#7]:[#6]:[#6]:2):[#7]:[#6]:1",
        "[#6]1:[#6]:[#6]2:[#6](:[#6]:[#6]:[#6]:[#7]:2):[#7]:[#6]:1",
        "[#6]1:[#6]:[#6]2:[#6](:[#6]:[#6]:[#7]:[#6]:2):[#7]:[#6]:1",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6]-[#7]=[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6]-[#6]=[#7]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]-[#8]-[#7]=[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7]=[#6]-[#8]-[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#8]-[#7]-[#6]=[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6]=[#7]-[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1:[#6]:[#6]:[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:2:1",
        "[#6]12:[#6]3:[#6](-[#6]-[#6]=[#6]-1):[#6]:[#6]:[#6]:[#6]:3:[#6]:[#6]:[#6]:2",
        "[#6]12-[#6]-[#6]3:[#6](:[#6]:[#6]:[#6]:[#6]:3)-[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#7H]:[#6]3:[#6](:[#6]:[#6]:[#6]:[#6]:3):[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12-[#6]-[#6]3:[#6](:[#6]:[#6]:[#6]:[#6]:3)-[#8]-[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12:[#7]:[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3:[#6]:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]12-[#6]-[#6](-[#6]-[#6]-[#6]-1)-[#6]-2",
        "[#6]12:[#7]:[#6]:[#7]:[#6]:[#6]:1:[#7H]:[#6]:[#7]:2",
        "[#6]12-[#6]-[#6]-[#6]-[#6]-[#6]-1-[#6]1-[#6](-[#6]3-[#6]-[#6]-[#6]-[#6]-3-[#6]-[#6]-1)-[#6]-[#6]-2",
    ],
}


AMINO_PROTECTORS = {
    "names": [
        "tert-butyloxycarbonyl",
        "trityl",
        "3,5-dimethoxyphenylisoproxycarbonyl",
        "2-(4-biphenyl)isopropoxycarbonyl",
        "2-nitrophenylsulfenyl",
        "boc",
        "trt",
        "ddz",
        "bpoc",
        "nps",
        "9-fluorenylmethoxycarbonyl",
        "2-(4-nitrophenylsulfonyl)ethoxycarbonyl",
        "(1,1-dioxobenzo[b]thiophene-2-yl)methyloxycarbonyl",
        "(1,1-dioxonaptho[1,2-b]thiophene-2-yl)methyloxycarbonyl",
        "1-(4,4-dimethyl-2,6-dioxocyclohex-1-ylidene)-3-methylbutyl",
        "2,7-di-tert-butyl-fmoc",
        "2-fluoro-fmoc",
        "2-monoisooctyl-fmoc",
        "2,7-diisooctyl-fmoc",
        "tetrachlorophthaloyl",
        "2-[phenyl(methyl)sulfonio])ethyloxycarbonyltetrafluoroborate",
        "ethanesulfonylethoxycarbonyl",
        "2-(4-sulfophenylsulfonyl)ethoxycarbonyl",
        "fmoc",
        "nsc",
        "bsmoc",
        "alpha-nsmoc",
        "ivdde",
        "fmoc*",
        "fmoc(fmoc(2f))",
        "mio-fmoc",
        "dio-fmoc",
        "tcp",
        "pms",
        "esc",
        "sps",
        "benzyloxycarbonyl",
        "allyloxycarbonyl",
        "o-nitrobenzenesulfonyl",
        "2,4-dinitrobenzenesulfonyl",
        "benzothiazole-2-sulfonyl",
        "2,2,2-trichloroethyloxycarbonyl",
        "dithiasuccinoyl",
        "p-nitrobenzyloxycarbonyl",
        "alpha-azidoacids",
        "proparglyoxycarbonyl",
        "o-nitrobenzylcarbonyl",
        "4-nitroveratryloxycarbonyl",
        "2-(2-nitrophenyl)propyloxycarbonyl",
        "2-(3,4-methylenedioxy-6-nitrophenyl)propyloxycarbonyl",
        "9-(4-bromophenyl)-9-fluorenyl",
        "azidomethoxycarbonyl",
        "hexafluoroacetone",
        "Z",
        "alloc",
        "o-nbs",
        "d-nbs",
        "bts",
        "troc",
        "dts",
        "pnz",
        "poc",
        "onz",
        "nvoc",
        "nppoc",
        "mnppoc",
        "brphf",
        "azoc",
        "hfa",
        "2-chlorobenzyloxycarbonyl",
        "4-methyltrityl",
        "cl-z",
        "mtt",
        "1-(4,4-dimethyl-2,6-dioxocylohex-1-ylidene)-3-methylbutyl",
        "trifluoroacetyl",
        "2-(methylsulfonyl)ethoxycarbonyl",
        "tfa",
        "msc",
        "phenyldisulphanylethyloxycarbonyl",
        "2-pyridyldisulphanylethyloxycarbonyl",
        "phdec",
        "pydec",
        "tert-butyl",
        "2-chlorotrityl",
        "2-4-dimethyoxybenzyl",
        "2-phenylisopropyl",
        "5-phenyl-3,4-ethylenedioxythenyl",
        "bu",
        "2-cl-trt",
        "dmb",
        "2-ph-pr",
        "phenyl-edotn",
        "9-fluorenylmethyl",
        "4-(N-[1-(4,4-dimethyl-2,6-dioxocylocheylidene)-3-methylbutyl]-amino)benzyl",
        "methyl",
        "ethyl",
        "carbamoylmethyl",
        "fm",
        "dmab",
        "me",
        "et",
        "cam",
        "allyl",
        "benzyl",
        "phenacyl",
        "p-nitrobenzyl",
        "2-trimethylsilyethyl",
        "(2-phenyl-2-trimethylsilyl)ethyl",
        "2-(trimethylsilyl)isopropyl",
        "2,2,2-trichloroethyl",
        "p-hydroxyphenacyl",
        "4,5-dimethyoxy-2-nitrobenzyl",
        "1,1-dimethylallyl",
        "pentaaminecobalt_III",
        "al",
        "bn",
        "pac",
        "pnb",
        "tmse",
        "ptmse",
        "tmsi",
        "tce",
        "php",
        "dmnb",
        "dma",
        "cyclohexyl",
        "b-menthyl",
        "b-3-methylpent-3-yl",
        "4-(3,6,9-trioxadecyl)oxybenzyl",
        "chx",
        "men",
        "mpe",
        "tegbz",
        "9-fluoroenylmethyl",
        "4-(N-[1-(4,4-dimethyl-2,6-dioxocyclohexylidene)-3-methyl-butyl]-amino)benzyl",
        "trimethylsilylethyl",
        "4,5-dimethoxy-2-nitrobenzyloxycarbonyl",
        "pseudoprolines",
        "2-hydroxy-4-methoxybenzyl",
        "2,4-dimethoxybenzyl",
        "2,4,6-trimethoxybenzyl",
        "1-methyl-3-indolylmethyl",
        "3,4-ethylene-dioxy-2-thenyl",
        "hmb",
        "tmob",
        "mim",
        "edot",
        "4-methoxy-2-nitro-benzyl",
        "(6-hydroxy-3-oxido-1,3-benz[d]oxathiol-5-yl)methyl",
        "2-hydroxy-4-methoxy-5-(methylsulfinyl)benzyl",
        "n-boc-n-methyl[2-(methylamino)ethyl]carbamoyl-hmb",
        "9-xanthenyl",
        "cyclopropyldimethylcarbinyl",
        "4,4-dimethoxybenzhydryl",
        "xan",
        "cpd",
        "mbh",
        "p-toluenesulfonyl",
        "2,2,5,7,8-pentamethylchroman-6-sulfonyl",
        "2,2,4,6,7-pentamethyl-2,3-dihydrobenzofuran-5-sulfonyl",
        "mesityl-2-sulfonyl",
        "4-methoxy-2,3,6-trimethylphenylsulfonyl",
        "1,2-dimethylindole-3-sulfonyl",
        "w,w-bis-tert-butyloxycarbonyl",
        "5-dibenzosuberenyl",
        "5-dibenzosuberyl",
        "2-methoxy-5-dibenzosuberyl",
        "nitro",
        "tos",
        "pmc",
        "pbf",
        "mts",
        "mtr",
        "mis",
        "bis-boc",
        "suben",
        "sub",
        "mesub",
        "no2",
        "w,w-bis-benzyloxycarbonyl",
        "w,w-bis-allyloxycarbonyl",
        "z",
        "p-methylbenzyl",
        "p-methoxybenzyl",
        "monomethoxytrityl",
        "trimethoxybenzyl",
        "2,2,4,6,7-pentamethyl-5-dihydrobenzofuranylmethyl",
        "1-adamantyl",
        "meb",
        "mob",
        "mmt",
        "pmbf",
        "1-ada",
        "2-(2,4-dinitrophenyl)ethyl",
        "9-fluororenylmethoxycarbonyl",
        "dnpe",
        "acetamidomethyl",
        "phenylacetamidomethyl",
        "5-tert-butylmercapto",
        "3-nitro-2-pyridinesulfenyl",
        "2-pyridinesulfenyl",
        "N-allyloxycarbonyl-N-[2,3,5,6-tetrafluoro-4-(phenylthio)phenyl]]aminomethyl",
        "o-nitrobenzyl",
        "4-picolyl",
        "ninhydrin",
        "acm",
        "phacm",
        "sbu",
        "npys",
        "s-pyr",
        "fsam",
        "onb",
        "nin",
        "n-tosyl",
        "n-trityl",
        "n-monomethoxytrityl",
        "n-methyltrityl",
        "n-tert-butyloxycarbonyl",
        "n-2,4-dimethylpent-3-yloxycarbonyl",
        "n-benzyloxymethyl",
        "n-tert-butoxymethyl",
        "ntos",
        "ntrt",
        "nmtt",
        "nmmt",
        "nboc",
        "ndoc",
        "nbom",
        "nbum",
        "N-9-fluorenylmethoxycarbonyl",
        "N-2,6-dimethoxybenzoyl",
        "dmbz",
        "N-2,4-dinitrophenyl",
        "dnp",
        "cyclohexyl;",
        "tert-butyldimethylsilyl",
        "tbdms",
        "tert-butyldiphenylsilyl",
        "propargyloxycarbonyl",
        "tbdps",
        "2,6-dichlorobenzyl",
        "2-bromobenzyl",
        "2-bromobenzyloxycarbonyl",
        "3-pentyl",
        "dcb",
        "brbn",
        "brz",
        "pen",
        "tegb",
        "boc-n-methyl-n-[2-(methylamino)ethyl]carbamoyl",
        "boc-nmec",
        "formyl",
        "cyclohexyloxycarbonyl",
        "for",
        "hoc",
    ],
    "smarts": [
        "[#8]=[#6]-[#8]-[#6](-[#6])(-[#6])-[#6]",
        "[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6](-[#6](-[#6])(-[#8]-[#6]=[#8])-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:1",
        "[#6]-[#6](-[#6])(-[#8]-[#6]=[#8])-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#16]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]-[#8]-[#6](-[#6])(-[#6])-[#6]",
        "[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6](-[#6](-[#6])(-[#8]-[#6]=[#8])-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:1",
        "[#6]-[#6](-[#6])(-[#8]-[#6]=[#8])-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#16]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1=[#6]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2-[#16]-1(=[#8])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1=[#6]-[#6]2:[#6]:[#6]:[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3:[#6]:2-[#16]-1(=[#8])=[#8]",
        "[#6]-[#6](-[#6])-[#6]-[#6]=[#6]1-[#6](-[#6]-[#6](-[#6])(-[#6])-[#6]-[#6]-1=[#8])=[#8]",
        "[#6]-[#6]1:[#6]:[#6]2-[#6](-[#6]-[#8]-[#6]=[#8])-[#6]3:[#6](-[#6]:2:[#6]:[#6]:1):[#6]:[#6]:[#6](:[#6]:3)-[#6](-[#6])(-[#6])-[#6]",
        "[#9]-[#6]1:[#6]:[#6]2:[#6](-[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3-[#6]-2-[#6]-[#8]-[#6]=[#8]):[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]-1:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:[#6]:2",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](:[#6]:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:2)-[#6]2:[#6]-1:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:[#6]:2",
        "[#8]=[#6]-[#6]1:[#6](-[#17]):[#6](-[#17]):[#6](-[#17]):[#6](-[#17]):[#6]:1-[#6]=[#8]",
        "[#6]-[#16+](-[#6]-[#6]-[#8]-[#6]=[#8])-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6](-[#16](=[#8])(-[#6]-[#6])=[#8])-[#6]",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6]1:[#6]:[#6]:[#6](-[#16](=[#8])(-[#8])=[#8]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1=[#6]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2-[#16]-1(=[#8])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1=[#6]-[#6]2:[#6]:[#6]:[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3:[#6]:2-[#16]-1(=[#8])=[#8]",
        "[#6]-[#6](-[#6])-[#6]-[#6]=[#6]1-[#6](-[#6]-[#6](-[#6])(-[#6])-[#6]-[#6]-1=[#8])=[#8]",
        "[#6]-[#6]1:[#6]:[#6]2-[#6](-[#6]-[#8]-[#6]=[#8])-[#6]3:[#6](-[#6]:2:[#6]:[#6]:1):[#6]:[#6]:[#6](:[#6]:3)-[#6](-[#6])(-[#6])-[#6]",
        "[#9]-[#6]1:[#6]:[#6]2:[#6](-[#6]3:[#6]:[#6]:[#6]:[#6]:[#6]:3-[#6]-2-[#6]-[#8]-[#6]=[#8]):[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]-1:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:[#6]:2",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](:[#6]:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:2)-[#6]2:[#6]-1:[#6]:[#6](-[#6](-[#6]-[#6]-[#6]-[#6]-[#6]-[#6]-[#6])=[#8]):[#6]:[#6]:2",
        "[#8]=[#6]-[#6]1:[#6](-[#17]):[#6](-[#17]):[#6](-[#17]):[#6](-[#17]):[#6]:1-[#6]=[#8]",
        "[#6]-[#16+](-[#6]-[#6]-[#8]-[#6]=[#8])-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6](-[#16](=[#8])(-[#6]-[#6])=[#8])-[#6]",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6]1:[#6]:[#6]:[#6](-[#16](=[#8])(-[#8])=[#8]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6]=[#6]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8])=[#8]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1-[#7+](-[#8-])=[#8])=[#8]",
        "[#8]=[#16](-[#6]1:[#7]:[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2:[#16]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#17])(-[#17])-[#17]",
        "[#8]=[#6]-[#16]-[#16]-[#6]=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1",
        "[#7-]=[#7+]=[#7]-[#6]-[#6](-[#8])=[#8]",
        "[#6]#[#6]-[#8]-[#6](-[#6])=[#8]",
        "[#8]=[#6]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6](-[#8]-[#6]):[#6](-[#8]-[#6]):[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8])-[#6]",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#6]1:[#6]:[#6]2-[#8]-[#6]-[#8]-[#6]:2:[#6]:[#6]:1-[#7+](-[#8-])=[#8])-[#6]",
        "[#35]-[#6]1:[#6]:[#6]:[#6](-[#6]2-[#6]3:[#6](-[#6]4:[#6]-2:[#6]:[#6]:[#6]:[#6]:4):[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#7]=[#7+]=[#7-]",
        "[#8]=[#6]1-[#8]-[#6](-[#6](-[#6](-[#9])(-[#9])-[#9])-[#6](-[#9])(-[#9])-[#9])-[#7]-[#6]-1",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6]=[#6]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8])=[#8]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1-[#7+](-[#8-])=[#8])=[#8]",
        "[#8]=[#16](-[#6]1:[#7]:[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2:[#16]:1)=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#17])(-[#17])-[#17]",
        "[#8]=[#6]-[#16]-[#16]-[#6]=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1",
        "[#6]#[#6]-[#8]-[#6](-[#6])=[#8]",
        "[#8]=[#6]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6](-[#8]-[#6]):[#6](-[#8]-[#6]):[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8])-[#6]",
        "[#8]=[#6]-[#8]-[#6]-[#6](-[#6]1:[#6]:[#6]2-[#8]-[#6]-[#8]-[#6]:2:[#6]:[#6]:1-[#7+](-[#8-])=[#8])-[#6]",
        "[#35]-[#6]1:[#6]:[#6]:[#6](-[#6]2-[#6]3:[#6](-[#6]4:[#6]-2:[#6]:[#6]:[#6]:[#6]:4):[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#7]=[#7+]=[#7-]",
        "[#8]=[#6]1-[#8]-[#6](-[#6](-[#6](-[#9])(-[#9])-[#9])-[#6](-[#9])(-[#9])-[#9])-[#7]-[#6]-1",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#17]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:1",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#17]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:1",
        "[#8]=[#6]1-[#6](-[#6](-[#6]-[#6](-[#6])-[#6]-1)=[#8])=[#6]-[#6]-[#6](-[#6])-[#6]",
        "[#8]=[#6]-[#6](-[#9])(-[#9])-[#9]",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6])=[#8]",
        "[#8]=[#6]-[#6](-[#9])(-[#9])-[#9]",
        "[#8]=[#6]-[#8]-[#6]-[#6]-[#16](=[#8])(-[#6])=[#8]",
        "[#8]=[#6]-[#8]-[#6](-[#16]-[#16]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]",
        "[#8]=[#6]-[#8]-[#6](-[#16]-[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1)-[#6]",
        "[#8]=[#6]-[#8]-[#6](-[#16]-[#16]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]",
        "[#8]=[#6]-[#8]-[#6](-[#16]-[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1)-[#6]",
        "[#6]-[#6](-[#6])-[#6]",
        "[#17]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:1",
        "[#6]-[#6](-[#6])-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]2-[#8]-[#6]-[#6]-[#8]-[#6]:2:[#6](:[#16]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6](-[#6])-[#6]",
        "[#17]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:1",
        "[#6]-[#6](-[#6])-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]2-[#8]-[#6]-[#6]-[#8]-[#6]:2:[#6](:[#16]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]1(-[#6]-[#6](-[#6](=[#6](-[#7]-[#6]2:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:2)-[#6]-[#6](-[#6])-[#6])-[#6](-[#6]-1)=[#8])=[#8])-[#6]",
        "[#6]",
        "[#6]-[#6]",
        "[#6]-[#6](-[#7])=[#8]",
        "[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]1(-[#6]-[#6](-[#6](=[#6](-[#7]-[#6]2:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:2)-[#6]-[#6](-[#6])-[#6])-[#6](-[#6]-1)=[#8])=[#8])-[#6]",
        "[#6]",
        "[#6]-[#6]",
        "[#6]-[#6](-[#7])=[#8]",
        "[#6]-[#6]=[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1",
        "[#6]-[#6]-[#6]-[Si](-[#6])(-[#6])-[#6]",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[Si](-[#6])(-[#6])-[#6]",
        "[#6]-[#6](-[#6])(-[Si](-[#6])(-[#6])-[#6])-[#6]",
        "[#6]-[#6](-[#17])(-[#17])-[#17]",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6](-[#8]):[#6]:[#6]:1)=[#8]",
        "[#6]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6](-[#8]-[#6]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#6]=[#6]-[#6](-[#6])-[#6]",
        "[#7]-[Co](-[#7])(-[#7])(-[#7])(-[#17])(-[#17])-[#7]",
        "[#6]-[#6]=[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1",
        "[#6]-[#6]-[#6]-[Si](-[#6])(-[#6])-[#6]",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[Si](-[#6])(-[#6])-[#6]",
        "[#6]-[#6](-[#6])(-[Si](-[#6])(-[#6])-[#6])-[#6]",
        "[#6]-[#6](-[#17])(-[#17])-[#17]",
        "[#6]-[#6](-[#6]1:[#6]:[#6]:[#6](-[#8]):[#6]:[#6]:1)=[#8]",
        "[#6]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6](-[#8]-[#6]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#6]=[#6]-[#6](-[#6])-[#6]",
        "[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]-[#6@H]1-[#6@H](-[#6](-[#6])-[#6])-[#6]-[#6]-[#6@@H](-[#6])-[#6]-1",
        "[#6]-[#6]-[#6](-[#6])-[#6]-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]):[#6]:[#6]:1",
        "[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]-[#6H]1-[#6H](-[#6](-[#6])-[#6])-[#6]-[#6]-[#6H](-[#6])-[#6]-1",
        "[#6]-[#6]-[#6](-[#6])-[#6]-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]):[#6]:[#6]:1",
        "[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]1(-[#6]-[#6](-[#6](=[#6](-[#7]-[#6]2:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:2)-[#6]-[#6](-[#6])-[#6])-[#6](-[#6]-1)=[#8])=[#8])-[#6]",
        "[#6]-[#6]-[#6]-[Si](-[#6])(-[#6])-[#6]",
        "[#6]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6](-[#8]-[#6]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#6]-[#6]1(-[#6])-[#7]-[#6](-[#6](-[#8])=[#8])-[#6]-[#8]-1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]-[#6]",
        "[#6]-[#6]1:[#6](-[#8]-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]-[#6]",
        "[#6]-[#6]-[#6]1:[#6]:[#7H]:[#6]2:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]1:[#6]2-[#8]-[#6]-[#6]-[#8]-[#6]:2:[#6]:[#16]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]",
        "[#6]-[#6]1:[#6](-[#8]-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]-[#6]",
        "[#6]-[#6]-[#6]1:[#6]:[#7H]:[#6]2:[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]1:[#6]2-[#8]-[#6]-[#6]-[#8]-[#6]:2:[#6]:[#16]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#16]1-[#6]-[#8]-[#6]2:[#6]-1:[#6]:[#6](-[#6]):[#6](-[#8]):[#6]:2",
        "[#6]-[#6]1:[#6]:[#6](-[#16](-[#6])=[#8]):[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]",
        "[#6]-[#6](-[#6])(-[#8]-[#6](-[#7](-[#6]-[#6]-[#7](-[#6](-[#8]-[#6]1:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:[#6]:1)=[#8])-[#6])-[#6])=[#8])-[#6]",
        "[#6]12-[#6]-[#6]3:[#6](:[#6]:[#6]:[#6]:[#6]:3)-[#8]-[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6](-[#6]1-[#6]-[#6]-1)-[#6]",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1",
        "[#6]12-[#6]-[#6]3:[#6](:[#6]:[#6]:[#6]:[#6]:3)-[#8]-[#6]:1:[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6](-[#6]1-[#6]-[#6]-1)-[#6]",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6]2-[#6]-[#6]-[#6](-[#6])(-[#6])-[#8]-[#6]:2:[#6](-[#6]):[#6]:1-[#6])=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6](-[#6]):[#6]2-[#8]-[#6](-[#6])(-[#6])-[#6]-[#6]:2:[#6]:1-[#6])=[#8]",
        "[#6]-[#6]1:[#6](-[#16](=[#8])(-[#7]-[#6](-[#7])=[#7])=[#8]):[#6](-[#6]):[#6]:[#6](-[#6]):[#6]:1",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6]:[#6](-[#8]-[#6]):[#6](-[#6]):[#6]:1-[#6])=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#7](-[#6]):[#6]2:[#6]:1:[#6]:[#6]:[#6]:[#6]:2)=[#8]",
        "[#6]-[#6](-[#6])(-[#8]-[#6](/[#7]=[#6](/[#7]-[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])=[#8])-[#7])=[#8])-[#6]",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]-[#6]-[#6]1-[#6]=[#6]-[#6]=[#6]-[#6]-1=[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]-[#6]-[#6]1:[#6](:[#6]:[#6]:[#6]:[#6]:1)-[#6]-2",
        "[#6]-[#8]-[#6]1:[#6]:[#6]2-[#6]-[#6]-[#6]3:[#6](-[#6]-[#6]:2:[#6]:[#6]:1):[#6]:[#6]:[#6]:[#6]:3",
        "[#8]=[#7+]-[#8-]",
        "[#8]=[#16](-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1)=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6]2-[#6]-[#6]-[#6](-[#6])(-[#6])-[#8]-[#6]:2:[#6](-[#6]):[#6]:1-[#6])=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6](-[#6]):[#6]2-[#8]-[#6](-[#6])(-[#6])-[#6]-[#6]:2:[#6]:1-[#6])=[#8]",
        "[#6]-[#6]1:[#6](-[#16](=[#8])(-[#7]-[#6](-[#7])=[#7])=[#8]):[#6](-[#6]):[#6]:[#6](-[#6]):[#6]:1",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#6]:[#6](-[#8]-[#6]):[#6](-[#6]):[#6]:1-[#6])=[#8]",
        "[#8]=[#16](-[#6]1:[#6](-[#6]):[#7](-[#6]):[#6]2:[#6]:1:[#6]:[#6]:[#6]:[#6]:2)=[#8]",
        "[#6]-[#6](-[#6])(-[#8]-[#6](/[#7]=[#6](/[#7]-[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])=[#8])-[#7])=[#8])-[#6]",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]-[#6]-[#6]1-[#6]=[#6]-[#6]=[#6]-[#6]-1=[#6]-2",
        "[#6]12:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#6]-[#6]-[#6]1:[#6](:[#6]:[#6]:[#6]:[#6]:1)-[#6]-2",
        "[#6]-[#8]-[#6]1:[#6]:[#6]2-[#6]-[#6]-[#6]3:[#6](-[#6]-[#6]:2:[#6]:[#6]:1):[#6]:[#6]:[#6]:[#6]:3",
        "[#8]=[#7+]-[#8-]",
        "[#8]=[#6](/[#7]=[#6](/[#7]-[#6](-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8])-[#7])-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#8]=[#6](/[#7]=[#6](/[#7]-[#6](-[#8]-[#6]-[#6]=[#6])=[#8])-[#7])-[#8]-[#6]-[#6]=[#6]",
        "[#8]=[#6](/[#7]=[#6](/[#7]-[#6](-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8])-[#7])-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6](-[#8]-[#6]):[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1-[#8]-[#6]",
        "[#6]-[#6]1:[#6](-[#6]):[#6](-[#6]):[#6]2-[#8]-[#6](-[#6])(-[#6])-[#6]-[#6]:2:[#6]:1-[#6]",
        "[#6]12-[#6]-[#6]3-[#6]-[#6](-[#6]-1)-[#6]-[#6](-[#6]-3)-[#6]-2",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]):[#6]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:1",
        "[#6]-[#6]1:[#6](-[#6]):[#6](-[#6]):[#6]2-[#8]-[#6](-[#6])(-[#6])-[#6]-[#6]:2:[#6]:1-[#6]",
        "[#6]12-[#6]-[#6]3-[#6]-[#6](-[#6]-1)-[#6]-[#6](-[#6]-3)-[#6]-2",
        "[#6]-[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1-[#6]2:[#6](-[#6]3:[#6]-1:[#6]:[#6]:[#6]:[#6]:3):[#6]:[#6]:[#6]:[#6]:2",
        "[#6]-[#6]-[#6]1:[#6]:[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#6]-[#7]-[#6](-[#6])=[#8]",
        "[#6]-[#7]-[#6](-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6]-[#6](-[#6])(-[#16])-[#6]",
        "[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1",
        "[#9]-[#6]1:[#6](-[#9]):[#6](-[#16]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6](-[#9]):[#6](-[#9]):[#6]:1-[#7](-[#6](-[#8]-[#6]-[#6]=[#6])=[#8])-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#6]-[#6]1:[#6]:[#6]:[#7]:[#6]:[#6]:1",
        "[#8]=[#6]1-[#6]2(-[#16]-[#6]-[#6](-[#6](-[#8])=[#8])-[#7]-2)-[#6](-[#6]2:[#6]-1:[#6]:[#6]:[#6]:[#6]:2)=[#8]",
        "[#6]-[#7]-[#6](-[#6])=[#8]",
        "[#6]-[#7]-[#6](-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6]-[#6](-[#6])(-[#16])-[#6]",
        "[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#16]-[#6]1:[#7]:[#6]:[#6]:[#6]:[#6]:1",
        "[#9]-[#6]1:[#6](-[#9]):[#6](-[#16]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6](-[#9]):[#6](-[#9]):[#6]:1-[#7](-[#6](-[#8]-[#6]-[#6]=[#6])=[#8])-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#7+](-[#8-])=[#8]",
        "[#8]=[#6]1-[#6]2(-[#16]-[#6]-[#6](-[#6](-[#8])=[#8])-[#7]-2)-[#6](-[#6]2:[#6]-1:[#6]:[#6]:[#6]:[#6]:2)=[#8]",
        "[#8]=[#16](-[#7]1:[#6]:[#6]:[#7]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1)=[#8]",
        "[#7]1(-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)(-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:[#7]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#8]-[#6](-[#6](-[#6])-[#6])-[#6](-[#6])-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#7+]1(-[#6]-[#8]-[#6]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#7H]:[#6]:[#6]:1",
        "[#6]-[#6](-[#6])(-[#6])-[#8]-[#6]-[#7+]1:[#6]:[#7H]:[#6]:[#6]:1",
        "[#8]=[#16](-[#7]1:[#6]:[#6]:[#7]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6](-[#6]):[#6]:[#6]:1)=[#8]",
        "[#7]1(-[#6](-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)(-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2)-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#6]:[#7]:[#6]:1",
        "[#6]-[#8]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#6]-[#6]1:[#6]:[#6]:[#6](:[#6]:[#6]:1)-[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#8]-[#6](-[#6](-[#6])-[#6])-[#6](-[#6])-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#7+]1(-[#6]-[#8]-[#6]-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2):[#6]:[#7H]:[#6]:[#6]:1",
        "[#6]-[#6](-[#6])(-[#6])-[#8]-[#6]-[#7+]1:[#6]:[#7H]:[#6]:[#6]:1",
        "[#8]=[#6](-[#8]-[#6]1-[#6]2:[#6]:[#6]:[#6]:[#6]:[#6]:2-[#6]2:[#6]-1:[#6]:[#6]:[#6]:[#6]:2)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#6]1:[#6](-[#8]-[#6]):[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#6]1:[#6](-[#8]-[#6]):[#6]:[#6]:[#6]:[#6]:1-[#8]-[#6])-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#6]1:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#8]=[#6](-[#6]1:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6](-[#7+](-[#8-])=[#8]):[#6]:[#6]:1)-[#7]1:[#6]:[#6]:[#7]:[#6]:1",
        "[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]-[Si](-[#6](-[#6])(-[#6])-[#6])-[#6]",
        "[#6]-[Si](-[#6](-[#6])(-[#6])-[#6])-[#6]",
        "[#6]-[#6](-[Si](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6])-[#6]",
        "[#6]#[#6]-[#8]-[#6](-[#6])=[#8]",
        "[#6]-[#6](-[Si](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)(-[#6])-[#6]",
        "[#6]-[#6]1:[#6](-[#17]):[#6]:[#6]:[#6]:[#6]:1-[#17]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#35]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#35]",
        "[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#6]-[#6]1:[#6](-[#17]):[#6]:[#6]:[#6]:[#6]:1-[#17]",
        "[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#35]",
        "[#8]=[#6]-[#8]-[#6]-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#35]",
        "[#6]-[#6]-[#6]-[#6]-[#6]",
        "[#6]-[#6]1:[#6]:[#6]:[#6](-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]-[#6]-[#8]-[#6]):[#6]:[#6]:1",
        "[#8]=[#6](-[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])=[#8])-[#7](-[#6])-[#6]-[#6]-[#7]-[#6]",
        "[#8]=[#6](-[#6](-[#8]-[#6](-[#6])(-[#6])-[#6])=[#8])-[#7](-[#6])-[#6]-[#6]-[#7]-[#6]",
        "[#6]=[#8]",
        "[#8]=[#6]-[#8]-[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
        "[#6]=[#8]",
        "[#8]=[#6]-[#8]-[#6]1-[#6]-[#6]-[#6]-[#6]-[#6]-1",
    ],
}


WARHEADS = {
    "names": [
        "propiolamide",
        "fumarate ester",
        "allenamide",
        "propiolonitrile",
        "propargylamide",
        "arylsulfonyl bicyclobutane",
        "haloalkane",
        "alpha-halomethyl",
        "alpha-haloamide",
        "alpha-haloester",
        "epoxide",
        "aziridine",
        "nitroalkane",
        "acrylamide",
        "cyanoenone",
        "aldehyde",
        "ketone",
        "nitrile",
        "cyanamide",
        "isothicyanate",
        "sulfone",
        "sulfonyl fluoride",
        "sulfonimidoyl fluoride",
        "aryl fluorosulfate",
        "ester",
        "sulfonamide",
        "2-carbonyl arylboronic acid",
        "n-methyl isoxazolium",
        "oxaziridine",
    ],
    "smarts": [
        "[#6]#[#6]-[#6](-[#7])=[#8]",
        "[#7]-[#6](/[#6]=[#6]/[#6]-[#6](-[#8]-[#6])=[#8])=[#8]",
        "[#7]-[#6](-[#6]=[#6]=[#6])=[#8]",
        "[#6]#[#6]-[#6]#[#7]",
        "[#6]#[#6]-[#6]-[#6](-[#7])=[#8]",
        "[#8]=[#16](-[#6]12-[#6]-[#6]-1-[#6]-2)(-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1)=[#8]",
        "[#6]-[#35]",
        "[#6]-[#6](-[#6]-[#17])=[#8]",
        "[#7]-[#6](-[#6]-[#17])=[#8]",
        "[#8]=[#6](-[#6]-[#17])-[#8]-[#6]",
        "[#6]1-[#6]-[#8]-1",
        "[#7]1-[#6]-[#6]-1",
        "[#6]-[#6]-[#7+](-[#8-])=[#8]",
        "[#6]=[#6]-[#6](-[#7])=[#8]",
        "[#8]=[#6](-[#6])-[#6](-[#6]#[#7])=[#6]",
        "[#8]=[#6H]-[#6]",
        "[#8]=[#6](-[#6])-[#6]",
        "[#7]#[#6]-[#6]",
        "[#7]-[#6]#[#7]",
        "[#7-]=[#6]=[#16]",
        "[#6]-[#16]=[#8]",
        "[#8]=[#16](-[#9])=[#8]",
        "[#7]=[#16](-[#9])(-[#9])=[#8]",
        "[#8]=[#16](-[#8]-[#6]-[#6]-[#6]-[#6]-[#6])(-[#9])=[#8]",
        "[#6]-[#6](-[#8]-[#6])=[#8]",
        "[#8]=[#16](-[#7])=[#8]",
        "[#8]=[#6](-[#6]1:[#6]:[#6]:[#6]:[#6]:[#6]:1-[#5](-[#8])-[#8])-[#6]",
        "[#6]-[#7+]1:[#6]:[#6]:[#6]:[#8]:1",
        "[#8]1-[#7]-[#6]-1",
    ],
}

ORGANIC = {
    "names": [
        "carboxyl",
        "carbonyl",
        "ether",
        "alkanol",
        "thiol",
        "halogen",
        "amine",
        "amide",
        "ketone",
    ],
    "smarts": [
        "[CX3](=O)[OX2H1]",
        "[CX3]=[OX1]",
        "[OD2]([#6])[#6]",
        "[#6][OX2H]",
        "[#16X2H]",
        "[F,Cl,Br,I]",
        "[NX3;H2,H1;!$(NC=O)]",
        "[NH2]",
        "[#6][CX3](=O)[#6]",
    ],
}

# Preset map
SMARTS_MAP = dict(
    amino=AMINO_PROTECTORS,
    rings=RINGS,
    heterocyclic=HETEROCYCLIC,
    scaffolds=SCAFFOLDS,
    warheads=WARHEADS,
    organic=ORGANIC,
)


TEXT_TEMPLATES = dict(
    single=[
        "The {PROPERTY_NAME} property has a magnitude {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a magnitude {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a value of {PROPERTY_VALUE}.",
        "The value of {PROPERTY_NAME} property is {PROPERTY_VALUE}.",
        "The value for {PROPERTY_NAME} property is {PROPERTY_VALUE}.",
        "The value of {PROPERTY_NAME} is {PROPERTY_VALUE}.",
        "The value for {PROPERTY_NAME} is {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a value {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} has a magnitude {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a value {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property has a magnitude {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property is evaluated to be {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property is evaluated to have a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} is evaluated to be {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} property is evaluated to have a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} is evaluated to have a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} is evaluated to have a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} is measured to have a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} is measured to have a magnitude of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} for the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system has a value of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} for the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system is {PROPERTY_VALUE}.",
        "The molecule represented by representation `{REPR_STRING}` via the {REPR_SYSTEM} representational system is characterized"
        " by the following properties, having the respective values: {PROPERTY_NAME}, and {PROPERTY_VALUE}.",
    ],
    multiple=[
        "The {PROPERTY_NAME} properties have the respective magnitudes: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the respective magnitudes of: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the magnitudes {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have respective magnitudes {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have respective magnitudes of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have magnitudes {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have respective magnitudes {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the following magnitudes {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have the following magnitudes respectively: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the following respective magnitudes {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the respective values: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the respective values of: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the values {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have respective values {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have respective values of {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have values {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have respective values {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the following values {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have the following values respectively: {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have the following respective values {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have been evaluated to be {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have been evaluated to have values of {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have been evaluated to have magnitudes of {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have been evaluated to have the following values {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have been evaluated to have following magnitudes {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} properties have been evaluated to have the following respective values {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} properties have been evaluated to have following respective magnitudes {PROPERTY_VALUE}.",
        "The {PROPERTY_NAME} for the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system have the values: {PROPERTY_VALUE} respectively.",
        "The {PROPERTY_NAME} for the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system are {PROPERTY_VALUE} respectively.",
        "The values for the {PROPERTY_NAME} of the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system are {PROPERTY_VALUE}.",
        "The magnitudes for the {PROPERTY_NAME} of the molecule with representation `{REPR_STRING}` in the {REPR_SYSTEM} representational system are {PROPERTY_VALUE}.",
        "The molecule represented by representation `{REPR_STRING}` via the {REPR_SYSTEM} representational system is characterized"
        " by the following properties, having the respective values: {PROPERTY_NAME}, and {PROPERTY_VALUE}.",
    ],
)

QA_TEMPLATES = dict(
    multiple=[
        "What are the values of the {PROPERTY_NAME} properties of {REPR_SYSTEM} molecule `{REPR_STRING}`?",
        "What are the values of {PROPERTY_NAME} properties of {REPR_SYSTEM} molecule `{REPR_STRING}`?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what are the values of the {PROPERTY_NAME} properties?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what are the values of {PROPERTY_NAME}?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what are the {PROPERTY_NAME} values?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what are the {PROPERTY_NAME}?",
        "What values do the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME}?",
        "What are the values for the following properties of {REPR_SYSTEM} molecule with {REPR_SYSTEM} string `{REPR_STRING}`: {PROPERTY_NAME}?",
        "What values do the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the properties: {PROPERTY_NAME}?",
        "What values do the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME} properties?",
    ],
    single=[
        "What is the value of the {PROPERTY_NAME} property for {REPR_SYSTEM} molecule `{REPR_STRING}`?",
        "What is the value of {PROPERTY_NAME} property of {REPR_SYSTEM} molecule `{REPR_STRING}`?",
        "What value does {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME} property?",
        "What value does the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME} property?",
        "What value does {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME}?",
        "What value does the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME}?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what is the value of the {PROPERTY_NAME} property?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what is the value of {PROPERTY_NAME}?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what is the {PROPERTY_NAME} value?",
        "For the {REPR_SYSTEM} molecule with string `{REPR_STRING}`, what is the {PROPERTY_NAME}?",
        "What is the magnitude of the {PROPERTY_NAME} property for {REPR_SYSTEM} molecule `{REPR_STRING}`?",
        "What magnitude does the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the property: {PROPERTY_NAME}?",
        "What magnitude does the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME} property?",
        "What magnitude does the {REPR_SYSTEM} molecule `{REPR_STRING}` have for the {PROPERTY_NAME}?",
    ],
)


def generate_template(template_type: str = "qa", key: str = "single"):
    """Randomly select prompt template.

    Args:
        template_type (str): Type of template. Take either `qa` or `text`. Defaults to `qa`.
        key (str): Cardinality of template. Can be `single` or `multiple`. Defaults to `single`.

    Returns:
          template (str): Selected template.
    """
    templates = QA_TEMPLATES[key] if template_type == "qa" else TEXT_TEMPLATES[key]

    template = templates[np.random.randint(low=0, high=len(templates), size=(1,)).item()]
    return template


def inspect_info(info: dict):
    """Inspect information dictionary and update contents if necessary.

    Args:
        info (dict): Dictionary of molecular information.

    Returns:
        new_info (dict): Updated dictionary of molecular information.

    """
    new_info = info.copy()
    for key, value in new_info.items():
        # Process each item in the dictionary
        if key == "PRECISION":
            continue

        elif isinstance(value, (list, tuple)):
            list_len = len(value)
            value = [
                str(round(sub_value, new_info["PRECISION"]))
                if isinstance(sub_value, (int, float))
                else str(sub_value)
                for sub_value in value
            ]

            if list_len > 2:
                properties = ", ".join(value[:-1])
                properties += " and " + value[-1]
            elif list_len == 2:
                properties = " and ".join(value)
            else:
                properties = value[0]
        else:
            if key == "PRECISION_TYPE":
                properties = "decimal places" if value == "decimal" else "significant figures"

            else:
                properties = (
                    str(round(value, new_info["PRECISION"]))
                    if isinstance(value, (int, float))
                    else str(value)
                )

        # Store processed information in new dictionary
        new_info[key] = properties
    return new_info


def inspect_template(template: str, template_cardinality: str = "single"):
    """Inspect and mutate template structure on the fly.

    Args:
        template (str): Template format as string.
        template_cardinality (str): Type of template. May be `multiple` or `single`. Defaults to `single`.

    Returns:
        template (str): Updated template.
    """
    prob = np.random.randn()

    if prob > 0.5:
        pass
    else:
        if template_cardinality == "single":
            hot_words = [
                "{PROPERTY_NAME} value",
                "{PROPERTY_NAME}",
                "magnitude",
                "value",
            ]

        else:
            hot_words = [
                "{PROPERTY_NAME} values",
                "{PROPERTY_NAME}",
                "magnitudes",
                "values",
            ]

        shuffle(hot_words)

        for term in hot_words:
            if term in template:
                prob = np.random.randn()
                if prob > 0.5:
                    template = template.split(term, maxsplit=1)
                    template = (
                        template[0]
                        + term
                        + " (rounded to within {PRECISION} {PRECISION_TYPE})"
                        + template[-1]
                    )
                    break
                else:
                    pass
            else:
                continue

    return template


def generate_info(info_cardinality: str = "single"):
    """Generate dictionary of molecular information at random.

    Args:
        info_cardinality (str): Cardinality of template. Can be `single` or `multiple`. Defaults to `single`.

    Returns:
        info (dict): Dictionary of molecular information.

    """
    if info_cardinality == "single":
        info = dict(
            PROPERTY_NAME="molar mass",
            REPR_SYSTEM="SMILES",
            REPR_STRING="CCC",
            PROPERTY_VALUE=359.02,
            PRECISION=2,
            PRECISION_TYPE="decimal",
        )
    else:
        info = dict(
            PROPERTY_NAME=["valence", "density", "molar mass"],
            REPR_SYSTEM="SMILES",
            REPR_STRING="CCCC(C)C",
            PROPERTY_VALUE=[27, 0.37, 359.02],
            PRECISION=2,
            PRECISION_TYPE="decimal",
        )
    return info
